#
# Copyright Â© 2016-2018 The Thingsboard Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

server:
  # Server bind address
  address: "0.0.0.0"
  # Server bind port
  port: "${SERVER_PORT:19090}"

rest:
  url: "${REST_URL:https://thingsboard.cloud}"
  username: "${REST_USERNAME:}"
  password: "${REST_PASSWORD:}"
mqtt:
  host: "${MQTT_HOST:thingsboard.cloud}"
  port: "${MQTT_PORT:1883}"
  ssl:
    enabled: "${MQTT_SSL_ENABLED:false}"
    key_store: "${MQTT_SSL_KEY_STORE:mqttclient.jks}"
    key_store_password: "${MQTT_SSL_KEY_STORE_PASSWORD:password}"
device:
  # Device API to use - MQTT or HTTP
  api: "${DEVICE_API:MQTT}"
  startIdx: "${DEVICE_START_IDX:0}"
  endIdx: "${DEVICE_END_IDX:2000}"
  count: "${DEVICE_COUNT:2000}" # count of devices to be used by clients in k8s deployment run
  createOnStart: "${DEVICE_CREATE_ON_START:false}"
  deleteOnComplete: "${DEVICE_DELETE_ON_COMPLETE:false}"
gateway:
  startIdx: "${GATEWAY_START_IDX:0}"
  endIdx: "${GATEWAY_END_IDX:0}"
  count: "${GATEWAY_COUNT:3}" # count of devices to be used by clients in k8s deployment run
  createOnStart: "${GATEWAY_CREATE_ON_START:false}"
  deleteOnComplete: "${GATEWAY_DELETE_ON_COMPLETE:false}"
customer:
  createOnStart: "${CUSTOMER_CREATE_ON_START:false}"
  deleteOnComplete: "${CUSTOMER_DELETE_ON_COMPLETE:false}"
  profiles:
    - name: "Small"
      count: "${SMALL_CUSTOMER_COUNT:0}"
      minDevices: "${SMALL_CUSTOMER_MIN_DEVICES:0}"
      maxDevices: "${SMALL_CUSTOMER_MAX_DEVICES:0}"
      subCustomers:
        count: "${SMALL_CUSTOMER_SUB_COUNT:0}"
        minDevices: "${SMALL_CUSTOMER_SUB_MIN_DEVICES:7}"
        maxDevices: "${SMALL_CUSTOMER_SUB_MAX_DEVICES:7}"
    - name: "Big"
      count: "${BIG_CUSTOMER_COUNT:0}"
      minDevices: "${BIG_CUSTOMER_MIN_DEVICES:500}"
      maxDevices: "${BIG_CUSTOMER_MAX_DEVICES:500}"
      subCustomers:
        count: "${BIG_CUSTOMER_SUB_COUNT:0}"
        minDevices: "${BIG_CUSTOMER_SUB_MIN_DEVICES:15}"
        maxDevices: "${BIG_CUSTOMER_SUB_MAX_DEVICES:15}"
shared:
  createOnStart: "${SHARED_CREATE_ON_START:false}"
  deleteOnComplete: "${SHARED_DELETE_ON_COMPLETE:false}"
  profiles:
    - name: "SuperGroup"
      count: 1
      devices: 10
      customers: 10
    - name: "SmallGroup"
      count: 10
      devices: 10
      customers: 10
dashboard:
  createOnStart: "${DASHBOARD_CREATE_ON_START:false}"
  deleteOnComplete: "${DASHBOARD_DELETE_ON_COMPLETE:false}"
  deleteIfExists: "${DASHBOARD_DELETE_IF_EXISTS:true}"
  tenant: alarms.json # please use comma separated list for multiple dashboards: dashboard1.json, dashboard2.json
  shared: "devices.json"
warmup:
  enabled: "${WARMUP_ENABLED:false}"
test:
  # Type of the payload to send: DEFAULT, SMART_TRACKER, SMART_METER
  # RANDOM - TODO: add description
  # SMART_TRACKER - sample payload: {"latitude": 42.222222, "longitude": 73.333333, "speed": 55.5, "fuel": 92, "batteryLevel": 81}
  # SMART_METER - sample payload: {"pulseCounter": 1234567, "leakage": false, "batteryLevel": 81}
  payloadType: "${TEST_PAYLOAD_TYPE:SMART_METER}"
  instanceIdx: "${INSTANCE_IDX:0}"
  useInstanceIdx: "${USE_INSTANCE_IDX:false}"
  useInstanceIdxRegex: "${USE_INSTANCE_IDX_REGEX:false}"
  instanceIdxRegexSource: "${INSTANCE_IDX_REGEX_SOURCE:}"
  instanceIdxRegex: "${INSTANCE_IDX_REGEX:([0-9]+)$}"
  enabled: "${TEST_ENABLED:true}"
  updateRootRuleChain: "${UPDATE_ROOT_RULE_CHAIN:false}"
  revertRootRuleChain: "${REVERT_ROOT_RULE_CHAIN:false}"
  # Test API to use - device or gateway
  api: "${TEST_API:device}"
  sequential: "${TEST_SEQUENTIAL:true}"
  ruleChainName:  "${RULE_CHAIN_NAME:root_rule_chain_ce.json}"
  # messages per second.
  telemetry: "${TEST_TELEMETRY:true}"
  mps: "${MESSAGES_PER_SECOND:2000}"
  duration: "${DURATION_IN_SECONDS:86400}"
  alarms:
    start: "${ALARM_STORM_START_SECOND:0}"
    end: "${ALARM_STORM_END_SECOND:0}"
    # alarms per second should be less them messages per second.
    aps: "${ALARMS_PER_SECOND:10}"


